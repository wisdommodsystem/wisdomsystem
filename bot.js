const { Client, GatewayIntentBits, Collection, ActivityType } = require('discord.js');
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
require('dotenv').config();

// Create a new client instance
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildVoiceStates
  ]
});

// Global MongoDB connection state
global.mongoConnected = false;

// Function to check MongoDB connection status
function checkMongoDBStatus() {
  const states = {
    0: '‚ùå Disconnected',
    1: '‚úÖ Connected',
    2: 'üîÑ Connecting',
    3: 'üîÑ Disconnecting',
    99: '‚ùì Uninitialized'
  };
  
  const state = states[mongoose.connection.readyState] || '‚ùì Unknown';
  const dbName = mongoose.connection.name || 'Not connected';
  const host = mongoose.connection.host || 'Not connected';
  const port = mongoose.connection.port || 'Not connected';
  
  console.log('\n=== MongoDB Connection Status ===');
  console.log(`Status: ${state}`);
  console.log(`Database: ${dbName}`);
  console.log(`Host: ${host}`);
  console.log(`Port: ${port}`);
  console.log(`Ready State: ${mongoose.connection.readyState}`);
  console.log('===============================\n');
}

// Function to connect to MongoDB
async function connectToMongoDB() {
  try {
    console.log('\n=== MongoDB Connection Attempt ===');
    console.log('Checking MONGODB_URI:', process.env.MONGODB_URI ? '‚úÖ Present' : '‚ùå Missing');
    
    if (!process.env.MONGODB_URI) {
      throw new Error('MONGODB_URI is not defined in environment variables');
    }

    console.log('üîÑ Attempting to connect to MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    global.mongoConnected = true;
    console.log('‚úÖ MongoDB connected successfully!');
    checkMongoDBStatus();
  } catch (error) {
    global.mongoConnected = false;
    console.error('\n‚ùå MongoDB connection error:');
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    console.log('\nüîÑ Retrying connection in 5 seconds...');
    setTimeout(connectToMongoDB, 5000);
  }
}

// Initialize MongoDB connection
console.log('\n=== Starting MongoDB Connection ===');
connectToMongoDB();

// Set up periodic status check
setInterval(checkMongoDBStatus, 30000);

// Handle MongoDB connection events
mongoose.connection.on('connected', () => {
  global.mongoConnected = true;
  console.log('\n‚úÖ MongoDB connected');
  checkMongoDBStatus();
});

mongoose.connection.on('error', (err) => {
  global.mongoConnected = false;
  console.error('\n‚ùå MongoDB connection error:', err);
  checkMongoDBStatus();
});

mongoose.connection.on('disconnected', () => {
  global.mongoConnected = false;
  console.log('\n‚ùå MongoDB disconnected');
  checkMongoDBStatus();
});

// Command handling setup
client.commands = new Collection();
client.aliases = new Collection();

// Load commands
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
  const filePath = path.join(commandsPath, file);
  const command = require(filePath);
  
  if ('name' in command && 'execute' in command) {
    client.commands.set(command.name, command);
    console.log(`‚úÖ Loaded command: ${command.name}`);
    
    // Handle aliases
    if (command.aliases && Array.isArray(command.aliases)) {
      command.aliases.forEach(alias => {
        client.aliases.set(alias, command.name);
        console.log(`  ‚îî‚îÄ Alias: ${alias}`);
      });
    }
  } else {
    console.log(`‚ö†Ô∏è Command at ${filePath} is missing required properties`);
  }
}

// Load events
const eventsPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
  const filePath = path.join(eventsPath, file);
  const event = require(filePath);
  
  if (event.once) {
    client.once(event.name, (...args) => event.execute(...args));
  } else {
    client.on(event.name, (...args) => event.execute(...args));
  }
  console.log(`‚úÖ Loaded event: ${event.name}`);
}

// Handle process termination
process.on('SIGINT', async () => {
  console.log('\nüîÑ Closing MongoDB connection...');
  await mongoose.connection.close();
  console.log('‚úÖ MongoDB connection closed');
  process.exit(0);
});

// Login to Discord
client.login(process.env.TOKEN);

// Bot ready event
client.once('ready', () => {
  console.log(`\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó`);
  console.log(`‚ïë                     üöÄ BOT IS ONLINE! üöÄ                     ‚ïë`);
  console.log(`‚ïë                                                             ‚ïë`);
  console.log(`‚ïë  ü§ñ Bot Name: ${client.user.tag}                            ‚ïë`);
  console.log(`‚ïë  üÜî Bot ID: ${client.user.id}                               ‚ïë`);
  console.log(`‚ïë  üë• Servers: ${client.guilds.cache.size}                    ‚ïë`);
  console.log(`‚ïë  üë§ Users: ${client.users.cache.size}                       ‚ïë`);
  console.log(`‚ïë                                                             ‚ïë`);
  console.log(`‚ïë  üé® Created by: Apollo                                      ‚ïë`);
  console.log(`‚ïë  üéØ For: Wisdom Circle                                      ‚ïë`);
  console.log(`‚ïë  üì± Contact: @apollo_bevedere2                              ‚ïë`);
  console.log(`‚ïë  üîó Instagram: https://www.instagram.com/apollo_bevedere2   ‚ïë`);
  console.log(`‚ïë                                                             ‚ïë`);
  console.log(`‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n`);

  // Set bot status
  client.user.setPresence({
    activities: [{ 
      name: 'Wisdom Circle', 
      type: ActivityType.Playing 
    }],
    status: 'online'
  });
});

// Error handling
process.on('unhandledRejection', error => {
  console.error('‚ùå [ERROR] Unhandled promise rejection:', error);
});

client.on('error', error => {
  console.error('‚ùå [ERROR] Discord client error:', error);
});